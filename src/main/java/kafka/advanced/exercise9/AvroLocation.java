/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.advanced.exercise9;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AvroLocation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4902397947132397516L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AvroLocation\",\"namespace\":\"kafka.advanced.exercise9\",\"fields\":[{\"name\":\"locationArea\",\"type\":\"string\",\"doc\":\"The location where the sensor is deployed\"},{\"name\":\"locationType\",\"type\":{\"type\":\"enum\",\"name\":\"AvroLocationType\",\"symbols\":[\"ROOM\",\"BUILDING\",\"PARK\"]},\"doc\":\"The type of the location\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AvroLocation> ENCODER =
      new BinaryMessageEncoder<AvroLocation>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AvroLocation> DECODER =
      new BinaryMessageDecoder<AvroLocation>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AvroLocation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AvroLocation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AvroLocation>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AvroLocation to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AvroLocation from a ByteBuffer. */
  public static AvroLocation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** The location where the sensor is deployed */
  @Deprecated public java.lang.CharSequence locationArea;
  /** The type of the location */
  @Deprecated public kafka.advanced.exercise9.AvroLocationType locationType;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AvroLocation() {}

  /**
   * All-args constructor.
   * @param locationArea The location where the sensor is deployed
   * @param locationType The type of the location
   */
  public AvroLocation(java.lang.CharSequence locationArea, kafka.advanced.exercise9.AvroLocationType locationType) {
    this.locationArea = locationArea;
    this.locationType = locationType;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return locationArea;
    case 1: return locationType;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: locationArea = (java.lang.CharSequence)value$; break;
    case 1: locationType = (kafka.advanced.exercise9.AvroLocationType)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'locationArea' field.
   * @return The location where the sensor is deployed
   */
  public java.lang.CharSequence getLocationArea() {
    return locationArea;
  }

  /**
   * Sets the value of the 'locationArea' field.
   * The location where the sensor is deployed
   * @param value the value to set.
   */
  public void setLocationArea(java.lang.CharSequence value) {
    this.locationArea = value;
  }

  /**
   * Gets the value of the 'locationType' field.
   * @return The type of the location
   */
  public kafka.advanced.exercise9.AvroLocationType getLocationType() {
    return locationType;
  }

  /**
   * Sets the value of the 'locationType' field.
   * The type of the location
   * @param value the value to set.
   */
  public void setLocationType(kafka.advanced.exercise9.AvroLocationType value) {
    this.locationType = value;
  }

  /**
   * Creates a new AvroLocation RecordBuilder.
   * @return A new AvroLocation RecordBuilder
   */
  public static kafka.advanced.exercise9.AvroLocation.Builder newBuilder() {
    return new kafka.advanced.exercise9.AvroLocation.Builder();
  }

  /**
   * Creates a new AvroLocation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AvroLocation RecordBuilder
   */
  public static kafka.advanced.exercise9.AvroLocation.Builder newBuilder(kafka.advanced.exercise9.AvroLocation.Builder other) {
    return new kafka.advanced.exercise9.AvroLocation.Builder(other);
  }

  /**
   * Creates a new AvroLocation RecordBuilder by copying an existing AvroLocation instance.
   * @param other The existing instance to copy.
   * @return A new AvroLocation RecordBuilder
   */
  public static kafka.advanced.exercise9.AvroLocation.Builder newBuilder(kafka.advanced.exercise9.AvroLocation other) {
    return new kafka.advanced.exercise9.AvroLocation.Builder(other);
  }

  /**
   * RecordBuilder for AvroLocation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AvroLocation>
    implements org.apache.avro.data.RecordBuilder<AvroLocation> {

    /** The location where the sensor is deployed */
    private java.lang.CharSequence locationArea;
    /** The type of the location */
    private kafka.advanced.exercise9.AvroLocationType locationType;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.advanced.exercise9.AvroLocation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.locationArea)) {
        this.locationArea = data().deepCopy(fields()[0].schema(), other.locationArea);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.locationType)) {
        this.locationType = data().deepCopy(fields()[1].schema(), other.locationType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AvroLocation instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.advanced.exercise9.AvroLocation other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.locationArea)) {
        this.locationArea = data().deepCopy(fields()[0].schema(), other.locationArea);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.locationType)) {
        this.locationType = data().deepCopy(fields()[1].schema(), other.locationType);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'locationArea' field.
      * The location where the sensor is deployed
      * @return The value.
      */
    public java.lang.CharSequence getLocationArea() {
      return locationArea;
    }

    /**
      * Sets the value of the 'locationArea' field.
      * The location where the sensor is deployed
      * @param value The value of 'locationArea'.
      * @return This builder.
      */
    public kafka.advanced.exercise9.AvroLocation.Builder setLocationArea(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.locationArea = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'locationArea' field has been set.
      * The location where the sensor is deployed
      * @return True if the 'locationArea' field has been set, false otherwise.
      */
    public boolean hasLocationArea() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'locationArea' field.
      * The location where the sensor is deployed
      * @return This builder.
      */
    public kafka.advanced.exercise9.AvroLocation.Builder clearLocationArea() {
      locationArea = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'locationType' field.
      * The type of the location
      * @return The value.
      */
    public kafka.advanced.exercise9.AvroLocationType getLocationType() {
      return locationType;
    }

    /**
      * Sets the value of the 'locationType' field.
      * The type of the location
      * @param value The value of 'locationType'.
      * @return This builder.
      */
    public kafka.advanced.exercise9.AvroLocation.Builder setLocationType(kafka.advanced.exercise9.AvroLocationType value) {
      validate(fields()[1], value);
      this.locationType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'locationType' field has been set.
      * The type of the location
      * @return True if the 'locationType' field has been set, false otherwise.
      */
    public boolean hasLocationType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'locationType' field.
      * The type of the location
      * @return This builder.
      */
    public kafka.advanced.exercise9.AvroLocation.Builder clearLocationType() {
      locationType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AvroLocation build() {
      try {
        AvroLocation record = new AvroLocation();
        record.locationArea = fieldSetFlags()[0] ? this.locationArea : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.locationType = fieldSetFlags()[1] ? this.locationType : (kafka.advanced.exercise9.AvroLocationType) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AvroLocation>
    WRITER$ = (org.apache.avro.io.DatumWriter<AvroLocation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AvroLocation>
    READER$ = (org.apache.avro.io.DatumReader<AvroLocation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
